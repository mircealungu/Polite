Object subclass: #ObjectSample	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PoliteSmalltalk-Tests'!!ObjectSample methodsFor: 'as yet unclassified' stamp: 'Mirc 4/18/2013 11:43'!test	^ self as string! !!ObjectSample methodsFor: 'accessing' stamp: 'Mirc 4/18/2013 11:43'!as string	^ self asString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ObjectSample class	instanceVariableNames: ''!!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:16'!compile: aString classified: aSymbol withStamp: aChangeStamp notifying: anObject logSource: aBoolean	"Before compiling the methods of the receiver make sure that the respective language boxes are added, this makes it possible to have the boxes and the tests in the same package."		^ self		securelyCompile: aString		do: [ super compile: aString classified: aSymbol withStamp: aChangeStamp notifying: anObject logSource: aBoolean ]! !!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:16'!languageBoxes	^ Array with: PSLanguageBox! !!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:19'!languageBoxesHighlight	<highlight: 1>	^ LBHighlightAction new! !!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:19'!languageBoxesParser	<parse: 1>		^ LBParseAction new! !!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:11'!recompile: aSelector from: aClass	"Before compiling the methods of the receiver make sure that the respective language boxes are added, this makes it possible to have the boxes and the tests in the same package."		^ self		securelyCompile: (aClass sourceCodeAt: aSelector)		do: [ super recompile: aSelector from: aClass ]! !!ObjectSample class methodsFor: 'lb-support' stamp: 'JK 4/11/2013 16:11'!securelyCompile: aString do: aBlock	self languageBoxes do: [ :box |		(box default environments			noneSatisfy: [ :env | env includesClass: self ])			ifTrue: [ box default addClass: self ] ].	^ aBlock		on: CHParserError		do: [ :err |			| selector |			selector := RBParser parseMethodPattern: aString.			Transcript 				show: self class name; show: '>>#'; show: selector;				show: ' '; show: err messageText; cr.			self 				addSelector: selector				withMethod: (LBBrokenMethod					class: self					selector: selector					source: aString).			selector ]! !LBTestCase subclass: #PSLanguageBoxTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PoliteSmalltalk-Tests'!!PSLanguageBoxTest methodsFor: 'testing' stamp: 'Mirc 4/18/2013 11:23'!test! !!PSLanguageBoxTest methodsFor: 'testing' stamp: 'Mirc 4/18/2013 11:44'!testUnaryMessage1	| object string |	object := ObjectSample new.	string := object as string.		self assert: (string =  'an ObjectSample').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PSLanguageBoxTest class	instanceVariableNames: ''!!PSLanguageBoxTest class methodsFor: 'as yet unclassified' stamp: 'Mirc 4/18/2013 11:45'!languageBoxes	^ Array with: PSLanguageBox ! !